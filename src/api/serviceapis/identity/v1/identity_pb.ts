// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file serviceapis/identity/v1/identity.proto (package serviceapis.identity.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message serviceapis.identity.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string given_name = 2;
   */
  givenName?: string;

  /**
   * @generated from field: optional string family_name = 3;
   */
  familyName?: string;

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * @generated from field: bool email_verified = 5;
   */
  emailVerified = false;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "given_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "family_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.UserSession
 */
export class UserSession extends Message<UserSession> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string expires_at = 2;
   */
  expiresAt = "";

  constructor(data?: PartialMessage<UserSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.UserSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expires_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserSession {
    return new UserSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserSession {
    return new UserSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserSession {
    return new UserSession().fromJsonString(jsonString, options);
  }

  static equals(a: UserSession | PlainMessage<UserSession> | undefined, b: UserSession | PlainMessage<UserSession> | undefined): boolean {
    return proto3.util.equals(UserSession, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.GetUserByIdRequest
 */
export class GetUserByIdRequest extends Message<GetUserByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetUserByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.GetUserByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByIdRequest {
    return new GetUserByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByIdRequest {
    return new GetUserByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByIdRequest {
    return new GetUserByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByIdRequest | PlainMessage<GetUserByIdRequest> | undefined, b: GetUserByIdRequest | PlainMessage<GetUserByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetUserByIdRequest, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.GetUserByIdResponse
 */
export class GetUserByIdResponse extends Message<GetUserByIdResponse> {
  /**
   * @generated from field: serviceapis.identity.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.GetUserByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByIdResponse {
    return new GetUserByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByIdResponse {
    return new GetUserByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByIdResponse {
    return new GetUserByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByIdResponse | PlainMessage<GetUserByIdResponse> | undefined, b: GetUserByIdResponse | PlainMessage<GetUserByIdResponse> | undefined): boolean {
    return proto3.util.equals(GetUserByIdResponse, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * @generated from field: optional string given_name = 1;
   */
  givenName?: string;

  /**
   * @generated from field: optional string family_name = 2;
   */
  familyName?: string;

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.CreateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "given_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "family_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined, b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserRequest, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  /**
   * @generated from field: serviceapis.identity.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<CreateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.CreateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined, b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateUserResponse, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.GetUserBySessionTokenRequest
 */
export class GetUserBySessionTokenRequest extends Message<GetUserBySessionTokenRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<GetUserBySessionTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.GetUserBySessionTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserBySessionTokenRequest {
    return new GetUserBySessionTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserBySessionTokenRequest {
    return new GetUserBySessionTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserBySessionTokenRequest {
    return new GetUserBySessionTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserBySessionTokenRequest | PlainMessage<GetUserBySessionTokenRequest> | undefined, b: GetUserBySessionTokenRequest | PlainMessage<GetUserBySessionTokenRequest> | undefined): boolean {
    return proto3.util.equals(GetUserBySessionTokenRequest, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.GetUserBySessionTokenResponse
 */
export class GetUserBySessionTokenResponse extends Message<GetUserBySessionTokenResponse> {
  /**
   * @generated from field: serviceapis.identity.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserBySessionTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.GetUserBySessionTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserBySessionTokenResponse {
    return new GetUserBySessionTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserBySessionTokenResponse {
    return new GetUserBySessionTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserBySessionTokenResponse {
    return new GetUserBySessionTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserBySessionTokenResponse | PlainMessage<GetUserBySessionTokenResponse> | undefined, b: GetUserBySessionTokenResponse | PlainMessage<GetUserBySessionTokenResponse> | undefined): boolean {
    return proto3.util.equals(GetUserBySessionTokenResponse, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.AuthenticateWithGoogleCodeRequest
 */
export class AuthenticateWithGoogleCodeRequest extends Message<AuthenticateWithGoogleCodeRequest> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<AuthenticateWithGoogleCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.AuthenticateWithGoogleCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticateWithGoogleCodeRequest {
    return new AuthenticateWithGoogleCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticateWithGoogleCodeRequest {
    return new AuthenticateWithGoogleCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticateWithGoogleCodeRequest {
    return new AuthenticateWithGoogleCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticateWithGoogleCodeRequest | PlainMessage<AuthenticateWithGoogleCodeRequest> | undefined, b: AuthenticateWithGoogleCodeRequest | PlainMessage<AuthenticateWithGoogleCodeRequest> | undefined): boolean {
    return proto3.util.equals(AuthenticateWithGoogleCodeRequest, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.AuthenticateWithGoogleCodeResponse
 */
export class AuthenticateWithGoogleCodeResponse extends Message<AuthenticateWithGoogleCodeResponse> {
  /**
   * @generated from field: serviceapis.identity.v1.UserSession session = 1;
   */
  session?: UserSession;

  constructor(data?: PartialMessage<AuthenticateWithGoogleCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.AuthenticateWithGoogleCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "message", T: UserSession },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticateWithGoogleCodeResponse {
    return new AuthenticateWithGoogleCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticateWithGoogleCodeResponse {
    return new AuthenticateWithGoogleCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticateWithGoogleCodeResponse {
    return new AuthenticateWithGoogleCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticateWithGoogleCodeResponse | PlainMessage<AuthenticateWithGoogleCodeResponse> | undefined, b: AuthenticateWithGoogleCodeResponse | PlainMessage<AuthenticateWithGoogleCodeResponse> | undefined): boolean {
    return proto3.util.equals(AuthenticateWithGoogleCodeResponse, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.AuthenticateWithPasswordRequest
 */
export class AuthenticateWithPasswordRequest extends Message<AuthenticateWithPasswordRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<AuthenticateWithPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.AuthenticateWithPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticateWithPasswordRequest {
    return new AuthenticateWithPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticateWithPasswordRequest {
    return new AuthenticateWithPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticateWithPasswordRequest {
    return new AuthenticateWithPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticateWithPasswordRequest | PlainMessage<AuthenticateWithPasswordRequest> | undefined, b: AuthenticateWithPasswordRequest | PlainMessage<AuthenticateWithPasswordRequest> | undefined): boolean {
    return proto3.util.equals(AuthenticateWithPasswordRequest, a, b);
  }
}

/**
 * @generated from message serviceapis.identity.v1.AuthenticateWithPasswordResponse
 */
export class AuthenticateWithPasswordResponse extends Message<AuthenticateWithPasswordResponse> {
  /**
   * @generated from field: serviceapis.identity.v1.UserSession session = 1;
   */
  session?: UserSession;

  constructor(data?: PartialMessage<AuthenticateWithPasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "serviceapis.identity.v1.AuthenticateWithPasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "message", T: UserSession },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticateWithPasswordResponse {
    return new AuthenticateWithPasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticateWithPasswordResponse {
    return new AuthenticateWithPasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticateWithPasswordResponse {
    return new AuthenticateWithPasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticateWithPasswordResponse | PlainMessage<AuthenticateWithPasswordResponse> | undefined, b: AuthenticateWithPasswordResponse | PlainMessage<AuthenticateWithPasswordResponse> | undefined): boolean {
    return proto3.util.equals(AuthenticateWithPasswordResponse, a, b);
  }
}

